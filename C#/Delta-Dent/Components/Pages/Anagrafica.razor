@page "/Anagrafica"
@page "/Anagrafica/{DoctorId:int?}"
@using Blazored.LocalStorage
@inject IJSRuntime Js
<PageTitle>Anagrafica</PageTitle>
@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage

<div class="container-fluid mt-5 mt-sm-0">
    <!--top bar-->
    <div class="container-fluid">
        <!--pages: questa sezione deve dividersi in 2 siccome i pulsanti occupano solo metà dello spazio del container genitore-->
        <div class="row pages">
            <!--suddivido la riga in 2 colonne-->
            <div class="col-md-8 col-sm-12">
                <!--suddivido la colonna in 4, uno per ogni pulsante-->
                <div class="row">
                    <div class="col ps-1 pe-0  px-md-1 pl-sm-0 pr-sm-1">
                        <button class="scheda selectedPage" id="btnPaziente">
                            pazienti
                        </button>
                    </div>

                    <div class="col p-0 px-md-1 pl-sm-0 pr-sm-1">
                        <button class="scheda unselectedPage" id="btnClienti">
                            clienti
                        </button>
                    </div>

                    <div class="col p-0 px-md-1 pl-sm-0 pr-sm-1">
                        <button class="scheda unselectedPage" id="btnFornitori">
                            fornitori
                        </button>
                    </div>

                    <div class="col p-0 px-md-1 pl-sm-0 pr-sm-1">
                        <button class="scheda unselectedPage" id="btnContatti">
                            contatti
                        </button>
                    </div>
                </div>
            </div>
            <!--questa colonna resterà vuota per spaziare e eventualmente rimossa per dispositivi mobili-->
            <div class="col hidden-sm">

            </div>
        </div>
        <!--buttons-->
        <div class="row toolbar">
            <!-- suddivisione in 2-2-2-1-3-1-1 della barra-->
            <div class="col-2 col-sm-2 col-md-2 ps-1 pe-0  px-md-1 pl-sm-0 pr-sm-1">
                <button class="btnTool aggiungi" @onclick="OpenAddPatient" id="btnAggiungi" data-toggle="modal" data-target="#exampleModalCenter">
                    
                </button>
            </div>

            <div class="col-2 col-sm-2 col-md-2 p-0 px-md-1 pl-sm-0 pr-sm-1">
                <button class="btnTool modifica" id="btnModifica" @onclick="OpenModifyPatient">
                    
                </button>
            </div>

            <div class="col-2 col-sm-2 col-md-2 p-0 px-md-1 pl-sm-0 pr-sm-1">
                <button class="btnTool elimina" id="btnElimina" @onclick="DeleteFromDb">
                    
                </button>
            </div>

            <div class="d-none d-sm-flex col-sm-1 p-0 px-md-1 pl-sm-0 pr-sm-1">
                <button class="btnTool" id="btnStampa" @onclick="Populator">
                    Stampa
                </button>
            </div>

            <div class="col-4 col-sm-1 col-md-2 p-0 px-md-1 pl-sm-0 pr-sm-1">
                <input class="inputRicerca" id="txtRicerca" placeholder="Ricerca" @bind-value="_searchValue" @oninput="SearchPatient"/> <!--@bind-value="searchValue" @oninput="searchPatient"-->
            </div>

            <div class="d-none d-sm-flex col-sm-1 p-0 px-md-1 pl-sm-0 pr-sm-1">
                <div class="col sideNum">
                    N
                </div>
                <div class="col">
                    <div class="inNum col">@_filteredPatientsList.Count</div>
                </div>
            </div>
            <!-- Input per selezionare le pagine -->
            <div class="d-none d-sm-flex col-sm-1 p-0 px-md-1 pl-sm-0 pr-sm-1">
                <div class="col sideNum">
                    P
                </div>
                <div class="col">
                    <input class="inNum" id="inputPagina" type="text" placeholder="@_currentPage" @bind="_currentPage" @oninput="RefreshPatients" />
                </div>
            </div>
            <!-- Input per navigare tra le pagine -->
            <div class="col-2 d-flex col-sm-1 p-0 px-md-1 pl-sm-0 pr-sm-1">
                <div class="col">
                    <button class="navsx sxArrow" @onclick="DecrementPage">
                        
                    </button>
                </div>
                <div class="col">
                    <button class="nav dxArrow" @onclick="IncrementPage">

                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- corpo centrale della pagina -->

    <div class="container-fluid corpo mt-1 px-5">
        <!-- heading della tabella -->
        <div class="row heading">
            <!-- divisione in 2-1-1-1-1-1-1-1-1-1-1-->
            <div class="col-6 col-sm-2 cella">
                cognome
            </div>
            <div class="col-6 col-sm-1 cella">
                nome
            </div>
            <div class="col-6 col-sm-1 cella">
                nascita
            </div>
            <div class="col-6 col-sm-1 cella">
                telefono
            </div>
            <div class=" d-none d-sm-block col-4 col-sm-1 cella">
                cellulare1
            </div>
            <div class=" d-none d-sm-block col-1 cella">
                cellulare2
            </div>
            <div class=" d-none d-sm-block col-1 cella">
                fatturare
            </div>
            <div class=" d-none d-sm-block col-1 cella">
                terminato
            </div>
            <div class="d-none d-sm-block col-1 cella">
                documentato
            </div>
            <div class="d-none d-sm-block col-1 cella lock">

            </div>
            <div class="d-none d-sm-block col-1 cella">

            </div>
        </div>
        <!-- body della tabella-->
        <div class>
            <!-- foreach per generare una riga per ogni paziente -->
            @if (_flagConnection)
            { int i = 0;
                foreach (var paziente in _filteredPatientsList)
                {
                    <div id="row-@i" class="row rigo mt-1" @onclick="() => UpdateLastClicked(paziente)">
                        <!-- divisione in 2-1-1-1-1-1-1-1-1-1-1-->
                        <div class="col-6 col-sm-2 cella">
                            @paziente.Surname
                        </div>
                        <div class="col-6 col-sm-1 cella">
                            @paziente.FirstName
                        </div>
                        <div class="col-6 col-sm-1 cella">
                            @DateOnly.FromDateTime(paziente.BirthDate)
                        </div>
                        <div class="col-6 col-sm-1 cella">
                            @paziente.Telephone
                        </div>
                        <div class=" d-none d-sm-block col-4 col-sm-1 cella">
                            @paziente.Phone1
                        </div>
                        <div class=" d-none d-sm-block col-1 cella">
                            @paziente.Phone2
                        </div>
                        <div class=" d-none d-sm-block col-1 cella">
                            @paziente.Billable
                        </div>
                        <div class=" d-none d-sm-block col-1 cella">
                            @(paziente.Completed ? "Si" : "No")
                        </div>
                        <div class="d-none d-sm-block col-1 cella">
                            @(paziente.Documented ? "Si" : "No")
                        </div>
                        <div class="d-none d-sm-block col-1 cella">
                            <input type="checkbox"/>
                        </div>
                        <div class="d-block d-sm-none col-3">

                        </div>
                        <div class="col-6 col-sm-1 cella">
                            <button class="openPatient" @onclick="() => NavigateToPatientPage(paziente)"></button>
                        </div>
                    </div>
                    i++;
                }
            }
            else
            {
                <div class="spinner">
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            }
            @if (_dbError) // Div per informare l'utente dell'errore nel DB
            {
                <div class="row rigo mt-1">
                    <div class="col-12 cella">
                        <svg fill="none" height="25" viewBox="0 0 24 24" width="25" xmlns="http://www.w3.org/2000/svg">
                            <path d="m13 13h-2v-6h2zm0 4h-2v-2h2zm-1-15c-1.3132 0-2.61358.25866-3.82683.7612-1.21326.50255-2.31565 1.23915-3.24424 2.16773-1.87536 1.87537-2.92893 4.41891-2.92893 7.07107 0 2.6522 1.05357 5.1957 2.92893 7.0711.92859.9286 2.03098 1.6651 3.24424 2.1677 1.21325.5025 2.51363.7612 3.82683.7612 2.6522 0 5.1957-1.0536 7.0711-2.9289 1.8753-1.8754 2.9289-4.4189 2.9289-7.0711 0-1.3132-.2587-2.61358-.7612-3.82683-.5026-1.21326-1.2391-2.31565-2.1677-3.24424-.9286-.92858-2.031-1.66518-3.2443-2.16773-1.2132-.50254-2.5136-.7612-3.8268-.7612z" fill="#393a37"></path>
                        </svg>
                        Si è verificato un errore nella lettura del database
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@if (_visible)
{
    <!--div utilizzato per oscurare la pagina mentre il pop up viene aperto-->
    <div class="oscuramento justify-content-center">
    <!--contenitore popup-->
    <div class="containerForm popUp px-4">
    <!--parte superiore-->
    <div class="row">
        <!--barra pulsanti-->
        <div class="col-9 col-sm-11 barra">
            <div class="row">
                <div class="col-6 col-sm-3">
                    <button class="btnForm selectedPage">Dati personali</button>
                </div>
                <div class="col-6 col-sm-3">
                    <button class="btnForm unselectedPage">familiari</button>
                </div>
                <div class="col-6 col-sm-3">
                    <button class="btnForm unselectedPage">contatti - fatturazione</button>
                </div>
                <div class="col-6 col-sm-3">
                    <button class="btnForm unselectedPage">note</button>
                </div>
            </div>
        </div>
        <!--barra pulsanti-->
        <div class="col-1">
            <button class="exit" @onclick="TogglePatientForm">
                X
            </button>
        </div>
    </div>
    <!--corpo centrale-->
    <div class="row mt-1 mt-sm-2">
    <!--parte inserimento dati-->
    <div class="formbody col-8 col-sm-10">
        <div class="row">
            <div class="row">
                <!--prima riga-->
                <div class="col-12 col-sm-6">
                    <div class="cardInput">
                        <div class="row">
                            Cognome*
                        </div>
                        <div class="row">
                            <input class="inputForm" type="text" @bind="_newPatientTemp.Surname" maxlength="25"/>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-sm-6">
                    <div class="cardInput">
                        <div class="row">
                            Nome*
                        </div>
                        <div class="row">
                            <input class="inputForm" type="text" @bind="_newPatientTemp.FirstName" maxlength="25"/>
                        </div>
                    </div>
                </div>
            </div>

            <!--seconda riga-->
            <div class="row mt-1">
                <div class="col-12 col-sm-6">
                    <div class="cardInput">
                        <div class="row">
                            <div class="ps-0 col-6 justify-content-start">luogo nascita</div>
                            <div class="col-6 align-content-center">
                                <label for="isEstero" style="font-size: 0.6rem">estero</label>
                                <input type="checkbox" id="isEstero" @bind="_newPatientTemp.Foreigner" maxlength="25"/>
                            </div>
                        </div>
                        <div class="row">
                            <input class="inputForm" type="text" @bind="_newPatientTemp.BirthPlace"/>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-6">
                    <div class="row">
                        <div class="col">
                            <div class="SmallcardInput">
                                <div class="row">
                                    provincia
                                </div>
                                <div class="row">
                                    <input class="inputForm" type="text" @bind="_newPatientTemp.BirthProvince" maxlength="25"/>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="SmallcardInput">
                                <div class="row">
                                    sesso
                                </div>
                                <div class="row">
                                    <select type="select" class="inputForm" @bind="_genderString">
                                        <option value="m">Maschio</option>
                                        <option value="f">Femmina</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!--terza riga-->
            <div class="row mt-1">
                <div class="col-12 col-sm-6">
                    <div class="row">
                        <div class="col">
                            <div class="SmallcardInput">
                                <div class="row">
                                    data nascita
                                </div>
                                <div class="row">
                                    <input class="inputForm data" type="date" @bind="_newPatientTemp.BirthDate" EnableMinMax="true" min="1900-01-01" max="@_today"/>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="SmallcardInput">
                                <div class="row">
                                    codice asl
                                </div>
                                <div class="row">
                                    <input class="inputForm" type="text" @bind="_newPatientTemp.CASL" maxlength="5"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-6">
                    <div class="cardInput">
                        <div class="row">
                            <div class="ps-0 col-6 justify-content-start">codice fiscale</div>
                            <div class="col-6 align-content-center">
                                <label for="isEstero" style="font-size: 0.6rem">controllo validità</label>
                                <input type="checkbox" id="isValid"/>
                            </div>
                        </div>
                        <div class="row">
                            <input class="inputForm" type="text" @bind="_newPatientTemp.CF" maxlength="16"/>
                        </div>
                    </div>
                </div>
            </div>

            <!--quarta riga-->
            <div class="row mt-1">
                <div class="col-12 col-sm-6">
                    <div class="cardInput">
                        <div class="row">
                            categoria
                        </div>
                        <div class="row">
                            <select type="select" class="inputForm">
                                <!--@bind="gender"-->
                                <option value="p">prova</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-6">
                    <div class="row">
                        <div class="col">
                            <div class="SmallcardInput">
                                <div class="row">
                                    Id medico
                                </div>
                                <div class="row">
                                    <input @bind="DoctorId"  type="text" class="inputForm" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="SmallcardInput">
                                <div class="row">
                                    professione
                                </div>
                                <div class="row">
                                    <select type="select" class="inputForm" placeholder=" ">
                                        <!--@bind="gender"-->
                                        <option value="p">prova</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--quinta riga-->
            <div class="row mt-1">
                <div class="cardInput textarea">
                    <div class="row">
                        indirizzi
                    </div>
                    <div class="row">
                        <textarea class="inputForm textarea" maxlength="100"></textarea>
                    </div>
                </div>
            </div>

        </div>

    </div>

    <!--parte tasti pc-->
    <div class="col-4 col-sm-2 SezPulsanti">
        <div class="row mt-1">
            <button class="formButton" @onclick="HandleSaveEdit">
                salva
            </button>
        </div>
        <div class="row mt-1">
            <button class="formButton">
                salva e apri
            </button>
        </div>
        <div class="row mt-1">
            <button class="formButton">
                salva e chiudi
            </button>
        </div>
        <div class="row mt-1">
            <button class="formButton" @onclick="TogglePatientForm">
                annulla
            </button>
        </div>
        <div class="row mt-1">
            <button class="formButton">
                stampa
            </button>
        </div>
        @if (_showFormError)
        {
            <div>Verificare i dati immessi</div>
        }
        <div class="row mt-4">
            <button class="formButton importIcon">
                importa Cliente
            </button>
        </div>
    </div>

    <!--sezione in bassso-->
    <div class="bottomForm mt-1">
        <div class="row" style="font-weight: bold; text-transform: uppercase;">
            <div class="col">preferenze</div>
        </div>
        <div class="row mt-1">
            <div class="col">
                <button class="formButton">
                    motivo
                </button>
            </div>
            <div class="col">
                <button class="formButton">
                    nominativo
                </button>
            </div>
            <div class="col">
                <button class="formButton">
                    note
                </button>
            </div>
        </div>
    </div>
    </div>
    </div>
    </div>
}
<script>

    let id;

    // Funzione per agganciare ad ogni riga della tabella un eventListener del click e chiamare setClicked()
    function setEventListeners(){
        document.querySelectorAll('.row.rigo').forEach(row => {
            row.addEventListener('click', function () {
                id = this.getAttribute('id')
                setClicked()
            })
        })
    }

    // Funzione per mostrare all'utente il paziente selezionato manipolando la classe css 'rigoSelected'
    function setClicked(){
        document.querySelectorAll('.row.rigo').forEach(row => {
            row.classList.remove('rigoSelected')
        })
        document.getElementById(id).classList.add('rigoSelected')
    }

    function putdelAnim(){
        document.getElementById(id).classList.add('rigoDeleted')
    }

    function popdelAnim(){
        document.getElementById(id).classList.remove('rigoDeleted')
    }

</script>

@code {
    private const int PatientsDisplayedPerPage = 50; // numero di pazienti visualizzati per pagina

    private string _today = DateTime.Today.ToString("yyyy-MM-dd"); // La data di oggi per impostare la data massima nel selezionatore di date

    [Parameter] public int? DoctorId { get; set; } // ID del medico su cui basare le richieste al database

    private readonly DBPopulator _dbPopulator = new(); // Oggetto per il popolamento del database
    private DbManager _db = new(); // Oggetto per la gestione del database

    private Patient _newPatientTemp = new(); // Paziente temporaneo per la creazione di nuovi pazienti
    private Patient? _lastPatientClicked; // Paziente selezionato
    private List<Patient> _patientsList = new(); // Elenco di tutti i pazienti
    private List<Patient> _filteredPatientsList = new(); // Elenco filtrato di pazienti

    private string? _genderString; // Sesso del paziente
    private string _searchValue = string.Empty; // Valore di ricerca
    private bool _showFormError; // Mostra il flag di errore del modulo
    private bool _visible; // Mostra il flag del modulo
    private bool _dbError; // Flag di errore del database
    private bool _editingPatient = false; // Flag per la modifica del paziente
    private int _currentPage = 1; // Numero di pagina corrente
    private string? _connectionString;
    private bool _flagConnection = false;

    protected override async Task OnInitializedAsync()
    {
        if (DoctorId is <= 0 or null)
        {
            DoctorId = 1;
        }

        _flagConnection = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        if (firstRender)
        {
            await Js.InvokeVoidAsync("setEventListeners");


            _flagConnection = true;

            _connectionString = await LocalStorage.GetItemAsync<string>("connectionString");

            if (string.IsNullOrEmpty(_connectionString))
            {
                Console.WriteLine("No connection string found in local storage.");
            }
            else
            {
                Console.WriteLine($"Connection string loaded from local storage: {_connectionString}");
            }

            await GetPatients(DoctorId, PatientsDisplayedPerPage);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles saving or editing a patient.
    /// </summary>
    public async Task HandleSaveEdit()
    {
        // Converte la stringa del genere in booleano
        _newPatientTemp.Gender = _genderString != "m";

        // Creo un nuovo paziente con i dati inseriti
        Patient patient = new Patient(
            _newPatientTemp.FirstName,
            _newPatientTemp.Surname,
            _newPatientTemp.Gender,
            "Default", // Valore predefinito per Telephone
            "Default", // Valore predefinito per Phone1
            "Default", // Valore predefinito per Phone2
            _newPatientTemp.CF,
            _newPatientTemp.CASL,
            _newPatientTemp.BirthDate,
            _newPatientTemp.BirthPlace,
            _newPatientTemp.Foreigner,
            _newPatientTemp.BirthProvince,
            "Default", // Valore predefinito per Billable
            false, // Valore predefinito per Completed
            false, // Valore predefinito per Documented
            (int)DoctorId!, // Casting e not-null assertion
            _newPatientTemp.Locked
        );

        // Controllo se gli input sono validi
        if (!patient.CheckInputs())
        {
            _showFormError = true;
            Console.WriteLine("Input non validi, paziente: " + patient);
        }

        if (_editingPatient)
        {
            Console.WriteLine("Modifica del paziente...");
            await EditPatient(patient);
        }
        else
        {
            Console.WriteLine("Aggiunta di un paziente...");
            await SavePatient(patient);
        }

        // Cancello l'ultimo paziente cliccato
        _lastPatientClicked = null;

        // Cancello l'errore
        _showFormError = false;

        // Nascondere il modulo del paziente
        TogglePatientForm();
    }

    /// <summary>
    /// Saves a new patient to the database.
    /// </summary>
    /// <param name="newPatient">The new patient to save.</param>
    public async Task SavePatient(Patient newPatient)
    {
        if (!await _db.SavePatientInDb(newPatient, _connectionString))
        {
            _showFormError = true;
            return;
        }

        _patientsList.Add(newPatient);

        // Aggiorno la lista filtrata
        _filteredPatientsList = _patientsList;

        // pulisco
        ClearText();
    }

    /// <summary>
    /// Updates an existing patient in the database.
    /// </summary>
    /// <param name="patient">The patient data to update.</param>
    public async Task EditPatient(Patient patient)
    {
        await _db.UpdatePatientFromId(patient, _lastPatientClicked.PatientID, _connectionString);
        _editingPatient = false;
    }

    /// <summary>
    /// Retrieves patients from the database based on doctor ID and pagination.
    /// </summary>
    /// <param name="doctorId">Doctor's ID.</param>
    /// <param name="patientsDisplayed">Number of patients to display per page.</param>
    /// <param name="page">Page number.</param>
    public async Task GetPatients(int? doctorId, int patientsDisplayed, int page = 1)
    {
        if (_connectionString == null)
        {
            Console.WriteLine("Cookie null");
            _dbError = true;
            return;
        }

        _patientsList = (await _db.GetPatientsFromDb(doctorId, patientsDisplayed, page, _connectionString)) ?? new List<Patient>();

        if (_patientsList.Count == 0)
        {
            _dbError = true;
            return;
        }

        _dbError = false;

        _filteredPatientsList = _patientsList;
    }

    /// <summary>
    /// Searches for patients based on first name or surname.
    /// </summary>
    /// <param name="e">Change event containing search value.</param>
    private void SearchPatient(ChangeEventArgs e)
    {
        _searchValue = e.Value?.ToString() ?? string.Empty;
        var searchTerms = _searchValue.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        _filteredPatientsList = _patientsList.Where(p =>
            searchTerms.All(term =>
                p.FirstName.Contains(term, StringComparison.OrdinalIgnoreCase) ||
                p.Surname.Contains(term, StringComparison.OrdinalIgnoreCase)
            )
        ).ToList();
    }

    /// <summary>
    /// Refreshes the list of patients based on current page number.
    /// </summary>
    public async Task RefreshPatients()
    {
        if (_currentPage > 0)
        {
            await GetPatients(DoctorId, PatientsDisplayedPerPage, _currentPage);
        }
        Console.WriteLine(_currentPage);
    }

    /// <summary>
    /// Deletes the selected patient from the database.
    /// </summary>
    public async Task DeleteFromDb()
    {
        if (_lastPatientClicked == null)
        {
            Console.WriteLine("No patient selected");
            return;
        }

        if (!await _db.DeletePatientFromId(_lastPatientClicked.PatientID, _connectionString))
        {
            return;
        }

        _patientsList.Remove(_lastPatientClicked);
        _filteredPatientsList = _patientsList;

        _lastPatientClicked = null;
    }

    /// <summary>
    /// Navigates to the patient's personal page based on patient ID.
    /// </summary>
    /// <param name="patient">The patient object.</param>
    private void NavigateToPatientPage(Patient? patient)
    {
        if (patient != null)
        {
            NavManager.NavigateTo($"/SchedaPaziente/{patient.PatientID}");
        }
    }

    /// <summary>
    /// Increments the current page number and updates the patient list.
    /// </summary>
    public async Task IncrementPage()
    {
        ++_currentPage;
        await GetPatients(DoctorId, PatientsDisplayedPerPage, _currentPage);
    }

    /// <summary>
    /// Decrements the current page number (if greater than 1) and updates the patient list.
    /// </summary>
    public async void DecrementPage()
    {
        if (_currentPage > 1) --_currentPage;
        await GetPatients(DoctorId, PatientsDisplayedPerPage, _currentPage);
    }

    /// <summary>
    /// Populates the patient database.
    /// </summary>
    public void Populator() => _dbPopulator.Populator(FlagPatient: true);

    /// <summary>
    /// Toggles the visibility of the patient form.
    /// </summary>
    private void TogglePatientForm()
    {
        _visible = !_visible;
    }

    /// <summary>
    /// Opens the patient form for modifying the selected patient.
    /// </summary>
    public void OpenModifyPatient()
    {
        if (_lastPatientClicked == null)
        {
            Console.WriteLine("Patient not selected");
            return;
        }

        _newPatientTemp = _lastPatientClicked;
        _editingPatient = true;
        TogglePatientForm();
    }

    /// <summary>
    /// Opens the patient form for adding a new patient.
    /// </summary>
    public void OpenAddPatient()
    {
        ClearText();
        _editingPatient = false;
        TogglePatientForm();
    }

    /// <summary>
    /// Clears all fields of the temporary patient object.
    /// </summary>
    public void ClearText()
    {
        _newPatientTemp = new Patient
        {
            FirstName = string.Empty,
            Surname = string.Empty,
            Gender = false,
            Telephone = string.Empty,
            Phone1 = string.Empty,
            Phone2 = string.Empty,
            CF = string.Empty,
            CASL = string.Empty,
            BirthDate = DateTime.MinValue,
            BirthPlace = string.Empty,
            BirthProvince = string.Empty,
            Billable = string.Empty,
            Completed = false,
            Documented = false,
            Foreigner = false,
            Locked = false,
            DoctorID = 0,
            PatientID = 0
        };
    }


    /// <summary>
    /// Updates the last clicked patient.
    /// </summary>
    /// <param name="p">The patient object.</param>
    public void UpdateLastClicked(Patient p) => _lastPatientClicked = p;
}
